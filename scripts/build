#!/usr/bin/env bash

REV=$(tput rev)
BLD=$(tput bold)
GRY="\e[90m"


BAREBONES=`pwd`/node_modules/nodeos-barebones
INITRAMFS=`pwd`/node_modules/nodeos-initramfs

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


#
# Wrap the system up and pack it
#

# Disk images are a composition of rootfs and usersfs
function createDiskImage() {
  mkdir -p `dirname $OBJECTS`

  # ToDo: sizes would need to be on cylinders and retain DOS compatibility
  # http://elinux.org/RPi_Advanced_Setup#Advanced_SD_card_setup

  ROOTFS=$OUT_DIR/$PLATFORM/rootfs
  USERSFS=$OUT_DIR/$PLATFORM/usersfs

  SIZE_MBR=$((2*1024))
  SIZE_ROOTFS=$(stat -L -c%s "$ROOTFS")
  SIZE_ROOTFS=$(($SIZE_ROOTFS/512))
  START_USERSFS=$(($SIZE_MBR+$SIZE_ROOTFS))

  dd if=/dev/zero of=$OBJECTS count=$SIZE_MBR &&
  cat $ROOTFS  >> $OBJECTS                    &&
  cat $USERSFS >> $OBJECTS                    || exit 10

  eval "echo \"$(< resources/sfdisk.txt)\"" | \
      /sbin/sfdisk -uS --force $OBJECTS || exit 11
}


OUT_DIR=`pwd`/out/$CPU_FAMILY
mkdir -p $OUT_DIR/$PLATFORM
case $PLATFORM in
  *_qemu|vagga)
    cp node_modules/nodeos-barebones/out/latest $OUT_DIR/$PLATFORM/barebones
    cp node_modules/nodeos-initramfs/out/latest $OUT_DIR/$PLATFORM/initramfs
  ;;

  *_iso|*_img)
    cp node_modules/nodeos-rootfs/out/latest $OUT_DIR/$PLATFORM/rootfs
  ;;
esac
cp node_modules/nodeos-usersfs/out/latest $OUT_DIR/$PLATFORM/usersfs

ln -sf $CPU_FAMILY/$PLATFORM out/latest


if [[ ! -z "$RELEASE" ]]; then
  ZIP_FILE=$OUT_DIR/$PLATFORM/$CPU_FAMILY-$PLATFORM.zip

  rm -f $ZIP_FILE

  case $PLATFORM in
    pc_qemu)
      zip -j $ZIP_FILE               \
        resources/runners/README.md  \
        $OUT_DIR/$PLATFORM/barebones \
        $OUT_DIR/$PLATFORM/initramfs \
        $OUT_DIR/$PLATFORM/usersfs   || exit 10

      eval "echo -e \"$(< resources/runners/qemu.sh)\"" > /tmp/run.sh

      chmod +x /tmp/run.sh
      zip -j $ZIP_FILE /tmp/run.sh || exit 12
    ;;

    pc_iso)
      zip -j $ZIP_FILE             \
        resources/runners/README.md  \
        $OUT_DIR/$PLATFORM/rootfs  \
        $OUT_DIR/$PLATFORM/usersfs || exit 11

      eval "echo -e \"$(< resources/runners/iso.sh)\"" > /tmp/run.sh

      chmod +x /tmp/run.sh
      zip -j $ZIP_FILE /tmp/run.sh || exit 12
    ;;

    raspberry_image)
      createDiskImage || exit $?

      eval "echo -e \"$(< resources/runners/raspberry.sh)\"" > /tmp/run.sh

      chmod +x /tmp/run.sh
      zip -j $ZIP_FILE /tmp/run.sh || exit 12

      zip -j $ZIP_FILE resources/runners/README.md || exit 13
    ;;

    vagga)
      cp resources/runners/README_vagga.md /tmp/README.md

      zip -j $ZIP_FILE               \
        /tmp/README.md               \
        $OUT_DIR/$PLATFORM/barebones \
        $OUT_DIR/$PLATFORM/initramfs \
        $OUT_DIR/$PLATFORM/usersfs   \
        resources/vagga.yaml         || exit 12
    ;;
  esac
fi


echo -e "${GRY}------------------------------------------${CLR}"
echo -e "${GRN}${BLD}Success!${CLR}"
echo -e "${GRN}You just built a custom NodeOS image${CLR}"
echo -e "${GRY}------------------------------------------${CLR}"
echo
echo -e "- Interactively run your image with:"

case $PLATFORM in
  docker)
    echo -e "${WHT}    npm run dockerBuild ${CLR}"
    echo -e "${WHT}    docker run -t -i NodeOS${CLR}"
    echo
    echo -e "- Share your creation with:"
    echo -e "${WHT}    docker push NodeOS${CLR}"
  ;;

  vagga)
    echo -e "${WHT}    vagga run${CLR}"
  ;;

  *_img|*_iso|*_qemu)
    echo -e "${WHT}    npm start${CLR}"
  ;;
esac
