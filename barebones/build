#!/bin/bash

# This script compiles from scratch a Node.js executable and its needed
# libraries and shell utils to offer a Node.js REPL from cold boot

GRN="\e[32m"
CLR="\e[0m"


NUM_JOBS=$((`nproc` + 1))

if [[ -z "$name" ]]; then name=barebones; fi


#
# coreutils (/usr/bin/env)
#

COREUTILS_VERSION=8.23
COREUTILS_URL=http://ftp.gnu.org/pub/gnu/coreutils/coreutils-$COREUTILS_VERSION.tar.xz

# Download and compile coreutils. We are only interested on 'env', thought.
if [[ ! -d deps/coreutils ]]; then
  sudo apt-get install autopoint bison gperf texinfo                     &&
  mkdir -p deps/coreutils                                                &&
  curl $COREUTILS_URL | tar xJf - -C deps/coreutils --strip-components=1 &&
  ( cd deps/coreutils && ./configure && make --jobs=$NUM_JOBS )          &&
  strip --strip-unneeded deps/coreutils/src/env                          || exit 110
fi


#
# Node.js
#

NODE_VERSION=v`curl -s https://semver.io/node/stable`
NODE_URL=http://nodejs.org/dist/latest/node-$NODE_VERSION.tar.gz

# explicicly clone node because submodules SUCK
if [[ ! -d deps/node ]]; then
  mkdir -p deps/node                                           &&
  curl $NODE_URL | tar xzf - -C deps/node --strip-components=1 &&
  ( cd deps/node && ./configure && make --jobs=$NUM_JOBS )     &&
  strip --strip-unneeded deps/node/node                        || exit 120
fi


#
# Node.js required shared libraries
#

#if [ $(uname -m) == 'x86_64' ]; then
#  platform=x86_64-linux-gnu
#else
#  platform=i386-linux-gnu
#fi
#
#if [ $(uname -m) == 'x86_64' ]; then
#  mkdir -p $ROOT/lib64                                                &&
#  cp -f /lib/$platform/ld-linux.so.2 $ROOT/lib/$platform/             &&
#  ln -s /lib/$platform/ld-linux.so.2 $ROOT/lib64/ld-linux-x86-64.so.2 || exit 131
#fi


#
# Linux kernel & gen_init_cpio utility
#

KERNEL_VERSION=3.16.0
KERNEL_URL=http://archive.ubuntu.com/ubuntu/pool/main/l/linux/linux_$KERNEL_VERSION.orig.tar.gz

# Download and compile Linux kernel using as basis the one from Ubuntu and
# the current system configuration, setting all modules to be compiled in
# the kernel and the path to the bundle initramfs with Node.js binary.
if [[ ! -d deps/linux ]]; then
  mkdir -p deps/linux                                             &&
  curl $KERNEL_URL | tar xzf - -C deps/linux --strip-components=1 &&
  cp -vi config deps/linux/.config                                &&
  ( cd deps/linux && make --jobs=$NUM_JOBS gen_init_cpio )        || exit 152
fi

GEN_INIT_CPIO="deps/linux/usr/gen_init_cpio"


#
# Wrap the system up and pack it
#

case $PLATFORM in
  docker)
    `$GEN_INIT_CPIO cpio.txt` | tar -cf - --format ustar @- | sudo docker import - $name || exit 151
  ;;
  qemu)  # Linux kernel
#     `$GEN_INIT_CPIO cpio.txt` | gzip > $name.cpio.gz || exit 152

    # Compile the kernel
    (
      cd deps/linux &&
      make --jobs=$NUM_JOBS &&
      cp arch/x86/boot/bzImage ../..
    ) || exit 154
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
