#!/usr/bin/env bash

#
# binutils
#

VERSION=2.24
URL=http://ftpmirror.gnu.org/binutils/binutils-$VERSION.tar.gz
SRC_DIR=$SOURCES/binutils
OBJ_DIR=$OBJECTS/binutils

# Download
if [[ ! -d $SRC_DIR ]]; then
  mkdir -p $SRC_DIR                                         &&
  curl -L $URL | tar xzf - -C $SRC_DIR --strip-components=1 || exit 120
fi

# Configure & compile
if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR &&
  (
    cd $OBJ_DIR                    &&
    $SRC_DIR/configure             \
        --prefix=$TOOLS            \
        --with-sysroot=$LFS        \
        --with-lib-path=$TOOLS/lib \
        --target=$TARGET           \
        --disable-nls              \
        --disable-werror           &&
    $MAKE
  ) || exit 111

  case $(uname -m) in
    x86_64)
      mkdir -v $TOOLS/lib && ln -sv lib $TOOLS/lib64
    ;;
  esac
fi

# Install
( cd $OBJ_DIR && $MAKE install ) || exit 112


#
# gcc
#

VERSION=4.9.2
URL=http://ftpmirror.gnu.org/gcc/gcc-$VERSION/gcc-$VERSION.tar.gz
SRC_DIR=$SOURCES/gcc
OBJ_DIR=$OBJECTS/gcc

# Download
if [[ ! -d $SRC_DIR ]]; then
  (
    mkdir -p $SRC_DIR                                         &&
    curl -L $URL | tar xzf - -C $SRC_DIR --strip-components=1 || exit 110

    cd $SRC_DIR

    # Download source code of mpfr, gmp & mpc
#    contrib/download_prerequisites
    mkdir -p mpfr && curl -L http://www.mpfr.org/mpfr-current/mpfr-3.1.2.tar.xz | tar xJf - -C mpfr --strip-components=1 &&
    mkdir -p gmp  && curl -L https://gmplib.org/download/gmp/gmp-6.0.0a.tar.xz  | tar xJf - -C gmp  --strip-components=1 &&
    mkdir -p mpc  && curl -L ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.2.tar.gz         | tar xzf - -C mpc  --strip-components=1 || exit 111

    #########################################################################
    # Here will be dragons. Should't it be included in GCC ./configure? :-( #
    #########################################################################
    for file in \
     $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
    do
      cp -uv $file{,.orig}
      sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
          -e 's@/usr@/tools@g' $file.orig > $file
      echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
      touch $file.orig
    done

    sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure

    sed -i 's/if \((code.*))\)/if (\1 \&\& \!DEBUG_INSN_P (insn))/' gcc/sched-deps.c
    #########################################################################
  ) || exit 110
fi

# Configure & compile
if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR &&
  (
    cd $OBJ_DIR                                        &&
    $SRC_DIR/configure                                 \
        --target=$TARGET                               \
        --prefix=$TOOLS                                \
        --with-sysroot=$LFS                            \
        --with-newlib                                  \
        --without-headers                              \
        --with-local-prefix=$TOOLS                     \
        --with-native-system-header-dir=$TOOLS/include \
        --disable-nls                                  \
        --disable-shared                               \
        --disable-multilib                             \
        --disable-decimal-float                        \
        --disable-threads                              \
        --disable-libatomic                            \
        --disable-libgomp                              \
        --disable-libitm                               \
        --disable-libquadmath                          \
        --disable-libsanitizer                         \
        --disable-libssp                               \
        --disable-libvtv                               \
        --disable-libcilkrts                           \
        --disable-libstdc++-v3                         \
        --enable-languages=c,c++
    $MAKE
  ) || exit 111
fi

# Install
( cd $OBJ_DIR && $MAKE install ) || exit 112


#
# Linux kernel headers
#

LINUX_VERSION=3.18.1
URL=https://www.kernel.org/pub/linux/kernel/v3.x/linux-$LINUX_VERSION.tar.xz
SRC_DIR=$SOURCES/linux

# Download & extract headers
if [[ ! -d $SRC_DIR ]]; then
  mkdir -p $SRC_DIR                                         &&
  curl -L $URL | tar xJf - -C $SRC_DIR --strip-components=1 &&
  (
    cd $SRC_DIR                                 &&
    $MAKE mrproper                              &&
    $MAKE INSTALL_HDR_PATH=dest headers_install &&
    cp -rv dest/include/* $TOOLS/include
  ) || exit 150
fi


#
# glibc
#

VERSION=2.20
URL=http://ftpmirror.gnu.org/glibc/glibc-$VERSION.tar.xz
SRC_DIR=$SOURCES/libc
OBJ_DIR=$OBJECTS/libc

# Download
if [[ ! -d $SRC_DIR ]]; then
  mkdir -p $SRC_DIR                                         &&
  curl -L $URL | tar xJf - -C $SRC_DIR --strip-components=1 || exit 120
fi

# Configure & compile
if [[ ! -r /usr/include/rpc/types.h ]]; then
  su -c 'mkdir -pv /usr/include/rpc'
  su -c 'cp -v sunrpc/rpc/*.h /usr/include/rpc'
fi

if [[ ! -d $OBJ_DIR ]]; then
  mkdir -p $OBJ_DIR &&
  (
    cd $OBJ_DIR                                &&
    $SRC_DIR/configure                         \
      --prefix=$TOOLS                          \
      --host=$TARGET                           \
      --build=$($SRC_DIR/scripts/config.guess) \
      --disable-profile                        \
      --disable-sanity-checks                  \
      --enable-kernel=$LINUX_VERSION           \
      --with-headers=$TOOLS/include            \
      libc_cv_forced_unwind=yes                \
      libc_cv_ctors_header=yes                 \
      libc_cv_c_cleanup=yes                    &&
    $MAKE
  ) || exit 121
fi

# Install
( cd $OBJ_DIR && $MAKE install ) || exit 122


#
# Check basic functions (compiling and linking) works as expected
#

echo 'main(){}' > dummy.c          || exit 130
$TARGET-gcc dummy.c                || exit 131
readelf -l a.out | grep ': '$TOOLS || exit 132
rm -v dummy.c a.out                || exit 133


echo -e "${GRN}Successfully built cross-toolchain pass 1${CLR}"
