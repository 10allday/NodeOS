#!/bin/bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


if [[ -z "$name" ]]; then name=rootfs; fi

ROOT=$(pwd)/ROOT
#HOME=$ROOT/root
HOME=$ROOT

if [[ -d $ROOT ]]; then
  chmod -R u+w $ROOT &&
  rm    -rf    $ROOT || exit 300
fi
mkdir -p $HOME || exit 301


#
# Install system dependencies
#

NODE_DIR=`pwd`/../barebones/deps/node
NPM="node $NODE_DIR/deps/npm/cli.js"
npmi="npm_config_prefix=$HOME $NPM i -g"

eval $npmi `grep -v "^#" packages.txt` &&
rm -rf $HOME/.npm $HOME/.node-gyp      || exit 310

ln -sf bin/nodeos-usersfs $HOME/init || exit 311


#
# Services to be started at boot
#

mkdir -p $HOME/etc                 &&
cp forever-starter.json $HOME/etc/ || exit 320


#
# Wrap the system up and pack it
#

# Set rootfs files ONLY readable
chmod -R u-w,go= "$ROOT" || exit 340

case $PLATFORM in
  docker)
    docker build -t $name . || exit 342
  ;;
  qemu)
    # Copy kernel and initramfs on the disk image

    # mkdir $ROOT/boot              &&
    # cp vmlinuz $ROOT/boot/vmlinuz &&
    # cp initrd  $ROOT/boot/initrd  || exit 330

    # Create the disk image

    DISK_SIZE=32  # Size in MB

    genext2fs -b $((DISK_SIZE*1024)) --root "$ROOT" --squash $name.img || exit 343
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
