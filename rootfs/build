#!/bin/bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


if [[ -z "$name" ]]; then name=rootfs; fi

ROOT=$(pwd)/ROOT
#HOME=$ROOT/root
HOME=$ROOT

sudo rm -rf $ROOT &&
mkdir   -p  $HOME || exit 300


#
# Install system dependencies
#

NODE_DIR=`pwd`/../barebones/deps/node
NPM="node $NODE_DIR/deps/npm/cli.js"
npmi="npm_config_prefix=$HOME $NPM i -g"

eval $npmi `grep -v "^#" packages.txt` &&
rm -rf $HOME/.npm $HOME/.node-gyp      || exit 310

ln -sf bin/nodeos-usersfs $HOME/init || exit 311


#
# Services to be started at boot
#

mkdir -p $HOME/etc                 &&
cp forever-starter.json $HOME/etc/ || exit 320


#
# Copy kernel and initramfs on the disk image
#

# mkdir $ROOT/boot              &&
# cp vmlinuz $ROOT/boot/vmlinuz &&
# cp initrd  $ROOT/boot/initrd  || exit 330


#
# Wrap the system up and pack it
#

# Set rootfs files owner to root
sudo chown -R root:root "$ROOT"                       &&
sudo chmod -R go=r      "$ROOT"                       &&
sudo find "$ROOT" -type d | xargs sudo chmod -R go=rx || exit 340

# Set /root files ONLY accesible to root
#sudo chmod -R go= "$HOME" || exit 341

case $PLATFORM in
  docker)
    sudo docker build -t $name . || exit 342
  ;;
  qemu)
    ROOTFS=$(pwd)/rootfs

    rm -f $name.img                      &&
    qemu-img create -f raw $name.img 32M &&
    mkfs.ext4 -F $name.img               &&

    mkdir -p $ROOTFS                     &&
    sudo mount -o loop $name.img $ROOTFS &&

    sudo cp -R $ROOT/* $ROOTFS &&

    sudo umount $ROOTFS &&
    rm -r $ROOTFS       || exit 343
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
